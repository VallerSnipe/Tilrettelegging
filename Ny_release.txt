Sjekkliste for ny versjon
Del 1: Forberedelser (Lokalt på din PC)
Øk versjonsnummeret

Åpne package.json.

Endre "version" fra f.eks. "1.0.1" til "1.0.2" (for en liten fiks) eller "1.1.0" (for ny funksjonalitet).

Commit og Push koden

Lagre alle filene dine.

Last opp den nyeste kildekoden til GitHub med en beskrivende melding. Kjør i terminalen:

Bash

git add .
git commit -m "Importert ny data til databasen"
git push
Del 2: Bygging (Lokalt på din PC)
Bygg installasjonsfilen

Kjør bygg-kommandoen i terminalen:

Bash

npm run build
Vent til prosessen er ferdig. Den nye installasjonsfilen (f.eks. ...Setup 1.0.2.exe) ligger nå klar i release-mappen.

Del 3: Publisering (På GitHub-siden)
Opprett en ny "Release"

Gå til ditt GitHub-repository i nettleseren.

Klikk på "Releases" i menyen til høyre.

Klikk på "Create a new release".

Fyll ut og publiser

Tag: Skriv inn v fulgt av det nye versjonsnummeret (f.eks. v1.0.2). Dette må matche package.json.

Tittel: Gi den en tittel (f.eks. Versjon 1.0.2).

Beskrivelse: Skriv kort hva som er nytt i denne versjonen.

Last opp filen: Dra .exe-filen (og eventuelle andre installasjonsfiler) fra din lokale release-mappe og slipp den i boksen for "Attach binaries".

Klikk på den grønne knappen "Publish release".

Det var det! Nå er den nye versjonen publisert, og brukere med en eldre versjon vil få et varsel om å laste den ned neste gang de starter programmet.

---------------------------------------------------------
Oppdatering av database

Løsningen: Database-migreringer
Den profesjonelle og korrekte måten å løse dette på er med database-migreringer.

Konseptet er enkelt: I stedet for å bytte ut hele databasen, gir vi appen en "oppskrift" på hvordan den skal oppdatere den eksisterende databasen fra en gammel versjon til den nye. Denne oppskriften kjøres automatisk første gang appen starter etter en oppdatering.

Vi kan bruke en innebygd funksjon i SQLite som heter PRAGMA user_version for å holde styr på hvilken "versjon" databasestrukturen har.

En enkel og robust migreringsstrategi
La oss implementere dette. Vi lager en ny fil for å håndtere logikken.

Steg 1: Lag en ny fil: database-migration.js
Opprett denne filen i rotmappen din, ved siden av main.js. Denne filen vil inneholde alle endringene du gjør i databasen over tid.



Steg 2: Kjør migreringene ved oppstart
Vi må sørge for at runMigrations-funksjonen kjøres hver gang appen starter, rett etter at databaseforbindelsen er etablert. Det beste stedet for dette er i db.js-filen din.

Oppdater db.js-filen din til å se slik ut:


Oppdater app-versjonen: Øk "version" i package.json (f.eks. til 1.2.0).

Publiser ny release: Bygg og last opp den nye versjonen til GitHub.

Nå vil eksisterende brukere som oppdaterer få databasen sin automatisk oppgradert, uten å miste noe data, og nye brukere vil få en fersk database med den nyeste strukturen.